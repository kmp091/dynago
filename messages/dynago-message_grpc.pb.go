// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DynagoServiceClient is the client API for DynagoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynagoServiceClient interface {
	Process(ctx context.Context, in *DynagoRequest, opts ...grpc.CallOption) (*DynagoResponse, error)
}

type dynagoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDynagoServiceClient(cc grpc.ClientConnInterface) DynagoServiceClient {
	return &dynagoServiceClient{cc}
}

func (c *dynagoServiceClient) Process(ctx context.Context, in *DynagoRequest, opts ...grpc.CallOption) (*DynagoResponse, error) {
	out := new(DynagoResponse)
	err := c.cc.Invoke(ctx, "/dynago.DynagoService/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynagoServiceServer is the server API for DynagoService service.
// All implementations must embed UnimplementedDynagoServiceServer
// for forward compatibility
type DynagoServiceServer interface {
	Process(context.Context, *DynagoRequest) (*DynagoResponse, error)
	mustEmbedUnimplementedDynagoServiceServer()
}

// UnimplementedDynagoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDynagoServiceServer struct {
}

func (UnimplementedDynagoServiceServer) Process(context.Context, *DynagoRequest) (*DynagoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedDynagoServiceServer) mustEmbedUnimplementedDynagoServiceServer() {}

// UnsafeDynagoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynagoServiceServer will
// result in compilation errors.
type UnsafeDynagoServiceServer interface {
	mustEmbedUnimplementedDynagoServiceServer()
}

func RegisterDynagoServiceServer(s grpc.ServiceRegistrar, srv DynagoServiceServer) {
	s.RegisterService(&DynagoService_ServiceDesc, srv)
}

func _DynagoService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynagoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynagoServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynago.DynagoService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynagoServiceServer).Process(ctx, req.(*DynagoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynagoService_ServiceDesc is the grpc.ServiceDesc for DynagoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynagoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynago.DynagoService",
	HandlerType: (*DynagoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _DynagoService_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynago-message.proto",
}

// ImportPluginServiceClient is the client API for ImportPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportPluginServiceClient interface {
	Import(ctx context.Context, in *ImportPluginRequest, opts ...grpc.CallOption) (*ImportPluginResponse, error)
}

type importPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImportPluginServiceClient(cc grpc.ClientConnInterface) ImportPluginServiceClient {
	return &importPluginServiceClient{cc}
}

func (c *importPluginServiceClient) Import(ctx context.Context, in *ImportPluginRequest, opts ...grpc.CallOption) (*ImportPluginResponse, error) {
	out := new(ImportPluginResponse)
	err := c.cc.Invoke(ctx, "/dynago.ImportPluginService/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportPluginServiceServer is the server API for ImportPluginService service.
// All implementations must embed UnimplementedImportPluginServiceServer
// for forward compatibility
type ImportPluginServiceServer interface {
	Import(context.Context, *ImportPluginRequest) (*ImportPluginResponse, error)
	mustEmbedUnimplementedImportPluginServiceServer()
}

// UnimplementedImportPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImportPluginServiceServer struct {
}

func (UnimplementedImportPluginServiceServer) Import(context.Context, *ImportPluginRequest) (*ImportPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedImportPluginServiceServer) mustEmbedUnimplementedImportPluginServiceServer() {}

// UnsafeImportPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportPluginServiceServer will
// result in compilation errors.
type UnsafeImportPluginServiceServer interface {
	mustEmbedUnimplementedImportPluginServiceServer()
}

func RegisterImportPluginServiceServer(s grpc.ServiceRegistrar, srv ImportPluginServiceServer) {
	s.RegisterService(&ImportPluginService_ServiceDesc, srv)
}

func _ImportPluginService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportPluginServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynago.ImportPluginService/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportPluginServiceServer).Import(ctx, req.(*ImportPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImportPluginService_ServiceDesc is the grpc.ServiceDesc for ImportPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImportPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynago.ImportPluginService",
	HandlerType: (*ImportPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Import",
			Handler:    _ImportPluginService_Import_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynago-message.proto",
}
